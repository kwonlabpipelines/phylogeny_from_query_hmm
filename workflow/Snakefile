import csv
import os

configfile: "config/config.yaml"
print(config['alignment_params'])
genome_file_map = {}
with open(config["genome_paths"], "r") as f:
        reader = csv.DictReader(f)
        parsed_list = [row for row in reader]
        for row in parsed_list:
            genome_file_map[row["genome_id"]] = row["genome_path"]

ALL_GENOMES = list(genome_file_map.keys())

def get_genome_file(wildcards):
    return {"genome": genome_file_map[wildcards.genome]}

def get_prots():
    _prots = []
    with open(config["hmms_to_align"], "r") as f:
        for line in f:
            if line[0:4] == "NAME":
                _prots.append(line.split()[1])
    return _prots

ALL_PROTS = get_prots()

localrules: target, rename_fasta

rule target:
    input:
        "output/allgenomes.tre"

rule gunzip_file:
    input:
        unpack(get_genome_file)
    output:
        temp("temp/00.unzip/{genome}.fna")
    shell:
        "gunzip -c {input} > {output}"

def check_if_gzipped(wildcards):
    if os.path.splitext(genome_file_map[wildcards.genome]) == ".gz":
        return "temp/00.unzip/{}.fna".format(wildcards.genome)
    else:
        return genome_file_map[wildcards.genome]

rule rename_fasta:
    input:
        check_if_gzipped
    output:
        temp("temp/01.rename/{genome}.fna")
    conda:
        "envs/biopython.yaml"
    script:
        "scripts/rename_fastas.py"

rule run_prodigal:
    input:
        genome = "temp/01.rename/{genome}.fna"
    output:
        amino_acid = "temp/02.cds/{genome}_cds_prod.faa",
        nucleotide = "temp/02.cds/{genome}_cds_prod.fna"
    conda:
        "envs/prodigal.yaml"
    shell:
        "prodigal -i {input.genome} -a {output.amino_acid} -d {output.nucleotide} -q"

rule make_concatenated_orf_file:
    input:
        expand("temp/02.cds/{genome}_cds_prod.f{{type}}", genome=ALL_GENOMES)
    output:
        "temp/03.phylo_tree/allgenomes_concatenated_orf.{type}.fasta"
    shell:
        "cat {input} > {output}"

rule hmmsearch:
    input:
        concatenated_orfs = "temp/03.phylo_tree/allgenomes_concatenated_orf.aa.fasta",
        hmmfile = config["hmms_to_align"]
    output:
        text = "temp/03.phylo_tree/hmmer_out/allgenomes_hmmer_result.txt",
        table = "temp/03.phylo_tree/hmmer_out/allgenomes_hmmer_result.tbl",
        domains = "temp/03.phylo_tree/hmmer_out/allgenomes_hmmer_result.dom.tbl"
    conda:
        "envs/hmmer.yaml"
    threads:
        8
    shell:
        "hmmsearch --cpu {threads} -o {output[text]} --tblout {output[table]} --domtblout {output[domains]} {input[hmmfile]} {input[concatenated_orfs]}"

rule concatenate_alignment:
    input:
        aligned_files = expand("temp/03.phylo_tree/ribo_aligned/{prot_name}_aligned.fasta", prot_name=ALL_PROTS),
        singletons = "temp/03.phylo_tree/hmmer_out/allgenomes_singletons.txt"
    output:
        "temp/03.phylo_tree/allgenomes.ribo.mafft.concat.fasta"
    conda:
        "envs/biopython.yaml"
    params:
        missing = config['alignment_params']['filter_proportion_missing']
    shell:
        "python scripts/make_phylo_tree/concatenate_alignment.py -m {params.missing} -s {input.singletons} -o {output}"

rule align_prots:
    input:
        "temp/03.phylo_tree/ribo_unaligned/dummy_file.txt"
    output:
        "temp/03.phylo_tree/ribo_aligned/{prot_name}_aligned.fasta"
    conda:
        "envs/mafft.yaml"
    shell:
        "mafft-linsi temp/03.phylo_tree/ribo_unaligned/{wildcards.prot_name}_unaligned.fasta > {output}"

rule make_ribo_files:
    input:
        singletons = "temp/03.phylo_tree/hmmer_out/allgenomes_singletons.txt",
        concatenated_orfs = "temp/03.phylo_tree/allgenomes_concatenated_orf.aa.fasta"
    output:
        "temp/03.phylo_tree/ribo_unaligned/dummy_file.txt"
    conda:
        "envs/biopython.yaml"
    shell:
        "python scripts/make_phylo_tree/make_ribo_files.py -m {input[singletons]} -c {input[concatenated_orfs]} -o temp/03.phylo_tree/ribo_unaligned/ -d {output} "

rule filter_hmm_results:
    input:
        "temp/03.phylo_tree/hmmer_out/allgenomes_hmmer_result.tbl"
    output:
        "temp/03.phylo_tree/hmmer_out/allgenomes_singletons.txt"
    conda:
        "envs/biopython.yaml"
    shell:
        "python scripts/make_phylo_tree/check_hmmsearch.py -i {input} -s {output}"

rule run_raxmlng:
    input:
        "temp/03.phylo_tree/allgenomes.ribo.mafft.concat.fasta"
    output:
        "output/allgenomes.tre"
    conda:
        "envs/raxmlng.yaml"
    threads:
        16
    params:
        model = config['tree_params']['model'],
        num_pars = config['tree_params']['num_parsimony_trees'],
        outgroup = config['tree_params']['outgroup']
    shell:
        """
        raxml-ng --all --msa {input} --force perf_threads --model {params.model} --tree pars{{{params.num_pars}}} --outgroup {params.outgroup} --threads {threads}
        """


