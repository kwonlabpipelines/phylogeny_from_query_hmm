import csv
import os

configfile: "config/config.yaml"
genome_file_map = {}
with open(config["genome_paths"], "r") as f:
        reader = csv.DictReader(f)
        parsed_list = [row for row in reader]
        for row in parsed_list:
            genome_file_map[row["genome_id"]] = row["genome_path"]

ALL_GENOMES = list(genome_file_map.keys())

def get_genome_file(wildcards):
    return {"genome": genome_file_map[wildcards.genome]}

def get_prots():
    _prots = []
    with open(config["hmms_to_align"], "r") as f:
        for line in f:
            if line[0:4] == "NAME":
                _prots.append(line.split()[1])
    return _prots

ALL_PROTS = get_prots()

localrules: target, rename_fasta

def get_target_files(wildcards):
    target_files = []
    if config['make_raxmltree']:
        target_files.append(f"output/03.phylo_tree/{config['tree_prefix']}.msa.raxml.bestTree")
    if config['make_fasttree']:
        target_files.append(f"output/03.phylo_tree/{config['tree_prefix']}.msa.fasttree")
    return target_files

rule target:
    input:
        get_target_files


rule gunzip_file:
    input:
        unpack(get_genome_file)
    output:
        temp("output/00.unzip/{genome}.fna")
    shell:
        "gunzip -c {input} > {output}"

def check_if_gzipped(wildcards):
    if os.path.splitext(genome_file_map[wildcards.genome])[1] == ".gz":
        return "output/00.unzip/{}.fna".format(wildcards.genome)
    else:
        return genome_file_map[wildcards.genome]

rule rename_fasta:
    input:
        check_if_gzipped
    output:
        "output/01.rename/{genome}.fna"
    conda:
        "envs/biopython.yaml"
    script:
        "scripts/rename_fastas.py"

rule run_prodigal:
    input:
        genome = "output/01.rename/{genome}.fna"
    output:
        amino_acid = "output/02.cds/{genome}_cds_prod.faa",
        nucleotide = "output/02.cds/{genome}_cds_prod.fna"
    conda:
        "envs/prodigal.yaml"
    shell:
        "prodigal -i {input.genome} -a {output.amino_acid} -d {output.nucleotide} -q"

rule make_concatenated_orf_file:
    input:
        expand("output/02.cds/{genome}_cds_prod.f{{type}}", genome=ALL_GENOMES)
    output:
        f"output/03.phylo_tree/{config['tree_prefix']}_concatenated_orf.{{type}}.fasta"
    shell:
        "cat {input} > {output}"

rule hmmsearch:
    input:
        concatenated_orfs = f"output/03.phylo_tree/{config['tree_prefix']}_concatenated_orf.aa.fasta",
        hmmfile = config["hmms_to_align"]
    output:
        text = f"output/03.phylo_tree/hmmer_out/{config['tree_prefix']}_hmmer_result.txt",
        table = f"output/03.phylo_tree/hmmer_out/{config['tree_prefix']}_hmmer_result.tbl",
        domains = f"output/03.phylo_tree/hmmer_out/{config['tree_prefix']}_hmmer_result.dom.tbl"
    conda:
        "envs/hmmer.yaml"
    threads:
        8
    shell:
        "hmmsearch --cpu {threads} -o {output[text]} --tblout {output[table]} --domtblout {output[domains]} {input[hmmfile]} {input[concatenated_orfs]}"

rule concatenate_alignment:
    input:
        aligned_files = expand("output/03.phylo_tree/ribo_aligned/{prot_name}_aligned.fasta", prot_name=ALL_PROTS),
        singletons = f"output/03.phylo_tree/hmmer_out/{config['tree_prefix']}_singletons.txt"
    output:
        f"output/03.phylo_tree/{config['tree_prefix']}.msa"
    conda:
        "envs/biopython.yaml"
    params:
        missing = config['alignment_params']['filter_proportion_missing']
    shell:
        "python workflow/scripts/concatenate_alignment.py -m {params.missing} -s {input.singletons} -o {output}"

rule align_prots:
    input:
        "output/03.phylo_tree/ribo_unaligned/dummy_file.txt"
    output:
        "output/03.phylo_tree/ribo_aligned/{prot_name}_aligned.fasta"
    conda:
        "envs/mafft.yaml"
    shell:
        "mafft-linsi output/03.phylo_tree/ribo_unaligned/{wildcards.prot_name}_unaligned.fasta > {output}"

rule make_ribo_files:
    input:
        singletons = f"output/03.phylo_tree/hmmer_out/{config['tree_prefix']}_singletons.txt",
        concatenated_orfs = f"output/03.phylo_tree/{config['tree_prefix']}_concatenated_orf.na.fasta"
    output:
        "output/03.phylo_tree/ribo_unaligned/dummy_file.txt"
    conda:
        "envs/biopython.yaml"
    shell:
        "python workflow/scripts/make_ribo_files.py -m {input[singletons]} -c {input[concatenated_orfs]} -o output/03.phylo_tree/ribo_unaligned/ -d {output} "

rule filter_hmm_results:
    input:
        f"output/03.phylo_tree/hmmer_out/{config['tree_prefix']}_hmmer_result.tbl"
    output:
        f"output/03.phylo_tree/hmmer_out/{config['tree_prefix']}_singletons.txt"
    conda:
        "envs/biopython.yaml"
    shell:
        "python workflow/scripts/check_hmmsearch.py -i {input} -s {output}"

rule run_raxmlng:
    input:
        f"output/03.phylo_tree/{config['tree_prefix']}.msa"
    output:
        f"output/03.phylo_tree/{config['tree_prefix']}.msa.raxml.bestTree"
    conda:
        "envs/raxmlng.yaml"
    threads:
        16
    params:
        model = config['raxml_tree_params']['model'],
        outgroup = config['raxml_tree_params']['outgroup']
    shell:
        """
        raxml-ng --search1 --msa {input} --model {params.model} --outgroup {params.outgroup} --threads auto{threads}
        """

rule run_fasttree:
    input:
        f"output/03.phylo_tree/{config['tree_prefix']}.msa"
    output:
        f"output/03.phylo_tree/{config['tree_prefix']}.msa.fasttree"
    conda:
        "envs/fasttree.yaml"
    threads:
        8
    shell:
        """
        fasttree -gtr -gamma -nt {input} > {output} 
        """
